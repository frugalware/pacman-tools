#!/usr/bin/perl -w

print "THIS PROGRAM IS UNDER TESTING! USE WITH CARE!\n";

=head1 NAME

    rf - RepomanFrontend
    
=head1 DESCRIPTION

    rf will try to repoman del, repoman up and repoman cl
    the package from the program started.
    So run it from the package's darcs directory, 
    and do a darcs push too.
    
    If you specify -s, first it will look for the old source
    file on the server(this may fail sometimes), and do a repoman del
    Also do the same, with the old package file.
    
    Next is pushing the darcs patch.
    
    Than repoman up the given new source file, and upload the new
    package.
    
    After that do a repoman cl.
    
    You are free to pass multiple filenames to -f option, but if
    you do so, you need to put them between ''.
    Before any action, you will be asked if it is ok, that can be
    overriden with option -k.
    Also you can choose to give a proper command, if something goes
    wrong.
    
    The default repository is the main frugalware, version is current.
    So if you would like to upgrade eg. mysql, you dont have to 
    use -r option.
    
    Only the -s and -f options have to be given in many cases,
    every other data will be guessed!
    
=head1 OPTIONS
    
=over 1

=item B<-h>

    Help

=for comment
=item B<-e>
repository gets extra.

=item B<-r>

    Specify the repository eg. extra
    if not given, default will be used.

=item B<-a>

    Architecture, default is i686.

=item B<-R>

    The directory of the repo, where the fpms are.
    Default is frugalware-$arch.

=item B<-p>

    Serverprefix, eg. 
    ftp://ftp.frugalware.org/pub/frugalware/frugalware-current/ 
    also this is the default.

=item B<-g>

    Group of the package, meaning the physical group, eg. the 
    /extra/devel/adevelpkg has devel group.

=item B<-n>

    Name of the package

=item B<-s>

    New sourcefile

=item B<-f>

    New packagefile

=item B<-q>

    Do not look for old source and package.
    Useful when you contribute a new package.

=item B<-v>

    Version of the distribution, default is current.

=item B<-d> 
    
    Delete the files given in -s and -f
    
=item B<-k>

    Answer yes to all questions.

=head1 CHANGES

=head2 0.3

    Sourcefile must contain 'tar'.
    Inform of use of -d
    asking done with readkey - no more enter hit

=head1 BUGS

    Report bugs, patches, comments, patches and 
    funny quotes in your signature to
    <frugalware-devel@frugalware.org>

=head1 AUTHOR

    Zsolt Szalai

=head1 COPYRIGHT

    rf may be copied and modified under the terms of the 
    GNU General Public License v2

=cut

use strict;
no warnings qw(uninitialized);

use LWP::Simple;
use Cwd;
use Getopt::Std;
use Term::ReadLine;
eval {require Term::ReadLine::Gnu}; die 'Please install perl-term-readline-gnu!' if $@;
eval {require Term::ReadKey}; die 'Please install perl-term-readkey!' if $@;
import Term::ReadKey;

$Getopt::Std::STANDARD_HELP_VERSION = 1;
our $VERSION = "0.3";

sub HELP_MESSAGE(){
    print <<END
	rf [-s 'source1 source2 ...'] [-f packagefile] [-d] [-q] [-k] [-n name]
END
}


# run from the packages darcs dir!
# -h help; -e extrarepo!overrides -r; -r repo; -a arch/; -R repodir; -p serverprefix; 
#-g group*!physical category;  -n pkgname*; -s sourcefile* -f fpm* -v version!eg. current -d del the files
# -k noask -q dont look for old files on server
# / elsre nem csinlom meg; * kiszedheti mashonnan is eros konnyites
my %opts;
getopts('her:a:R:p:g:n:s:f:v:dqok', \%opts);

HELP_MESSAGE && die if  !%opts || $opts{h};

my ($distrib,$version,$repo,$arch, $repodir, $serverprefix, $group, $pkgname, $pkgfile, $noask) =
    ('frugalware',$opts{v},undef,$opts{a}, $opts{R}, $opts{p}, $opts{g}, $opts{n}, $opts{f}, $opts{k});
my @sourcefiles = split ' ', $opts{s};

sub msystem{
    system @_;
    warn 'Failed to execute!' if $? == -1;
}

sub getcommand{
    my $str = shift;
    my $term = new Term::ReadLine 'getcommand';
    return $term->readline('>',$str)
}

sub ask{
    my $str = shift;
    return 1 if $noask;
    print "$str ";
    my $key;
    ReadMode(4);
    while (not defined ($key = ReadKey(-1))) {
    }
    ReadMode(0);
    print "$key\n";
    return $key;
}

sub apply{
    my $comm = shift;
  APP:
    if ((my $an = ask "$comm\n Is this ok? [yg?]") =~ /^y|^$/i){
	msystem $comm;
    } elsif ($an =~ /^g/i){
	msystem getcommand($comm);
    } elsif ($an =~ /^\?/){
	print "y: applay command\ng: give a new command\n\n";
	undef $an;
	goto APP;
    }
    print "\n";
}

$repo = '' || $opts{r};
$repo = 'extra' if getcwd =~ m!/extra/!;

$version = 'current' unless $version; #no need :)
$arch = 'i686' unless $arch;
$repodir = "$distrib-$arch" unless $repodir;
$serverprefix = "ftp://ftp.$distrib.org/pub/$distrib/$distrib-$version/";  # no need :)

unless ( ($group) = getcwd =~ m!.*/(.*?)/[^/]*\Z! ){
    $group = $opts{g};
}
HELP_MESSAGE && die 'No physical group given!' unless $group;

unless (($pkgname) = $pkgfile =~ /^(.*)-.*?-.*?-.*?fpm\Z/){
    $pkgname = $opts{n};
}
HELP_MESSAGE && die 'Can not determine pkgname!' unless $pkgname;        

sub getoldsource{
    my ($url,$sourcefile)= @_;
    my ($sn) = $sourcefile =~ /(.*)-/;
    if (get($url) =~ /(\Q$sn\E.*?tar.*?)\s/) {
	return $1;
    }
    return 0;
}

sub getoldfpm{
    my ($url,$pkgname)= @_;
    if (get($url) =~ /(\Q$pkgname-\E.*?)\s/) {
	return $1;
    }
    return 0;
}

# Delete
unless ($opts{q}){
    if (@sourcefiles){
	for my $sourcefile (@sourcefiles){
	    print "Trying to get old source file from server\n";
	    if( my $olds = getoldsource("$serverprefix/$repo/source/$group/$pkgname/",$sourcefile) ){ 
		apply "repoman del $repo/source/$group/$pkgname/$olds";}}}
    if ($pkgfile){
# look for && repoman del old source
	print "Trying to get old package file from server\n";
	if( my $oldf = getoldfpm("$serverprefix/$repo/$repodir/",$pkgname) ){ 
	    apply "repoman del $repo/$repodir/$oldf";}}}

# darcs push?

apply "darcs push --match 'name $pkgname'";

# up and rest
for my $sourcefile (@sourcefiles){
    apply "repoman up $sourcefile $repo/source/$group/$pkgname/" if $sourcefile;
}

apply "repoman up $pkgfile $repo/$repodir/" if $pkgfile;

$repo.='/' if $repo;
apply "repoman cl $repo$group/$pkgname";

if ($opts{d}){ #delete source & fpm        doesnt ask it, -d is not default!
    for my $sourcefile (@sourcefiles){
	print "Deleting source file $sourcefile\n";
	unlink $sourcefile if $sourcefile;
    }
    print "Deleting package $pkgfile\n";
    unlink $pkgfile if $pkgfile;
}


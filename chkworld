#!/usr/bin/perl

=head1 NAME
    
chkworld - Compares FrugalBuild's up2date and pkgver informations
   
=head1 SYNOPSIS
    
chkdep [-vche] [-t num] directory1...
    
=head1 DESCRIPTION

Scans the given directories for FrugalBuild scripts, and compares up2date with pkgver.
This way, you will always known, how fresh and crispy the packages you're maintaining.

=head1 OPTIONS

=over 4

=item B<-t num>

num is a value in seconds. After num, the checking continues with the next package, 
shutting down child processes.
Default is 30.

=item B<-e>

Enables standard error output. By default STDERR is redirected to /dev/null.

=item B<-v>

Be verbose.

=item B<-c>

Colorized output.

=item B<-h>

A little help.

=head1 AUTHORS
    
Written by Zsolt Szalai.

Daniel Peder, Daniel.Peder@Infoset.COM - code from IO::FILE::String
    
=head1 COPYRIGHT
    
chkworld may be copied and modified under the terms of the GNU General Public
License v2.
    
=cut

use strict;
use warnings;
no warnings qw( uninitialized );
use Getopt::Std;
use File::Find;
use IO::File;

use Data::Dumper;

sub contents {
    my $sfh = IO::File->new( "< $_" );
    local $/ = undef;
    my $cont = $sfh->getline;
    $sfh->close;
    return $cont;
}

sub getpids{
    my @pids = @_;
    my @allpids;
    for my $pid (@pids){
        my @childs = qx/pgrep -P $pid/;
        chomp @childs;
        push @allpids, $pid, getpids(@childs);
    }
    @allpids;
}

sub timeout{ #time, command
    my ($time, $comm) = @_;
    my $output;
    my $pid;

    eval{                                                     
	local $SIG{ALRM} = sub {die "alarm\n" };
	alarm $time;            
	$pid = open(COMM, "$comm|");
	$output = scalar <COMM>;
	close COMM;                                                                 
    };                                                                              
    if ($@) {                
	do{                                 
	    my @chldpids = getpids($pid);
	    for my $chldpid (@chldpids) {
		kill TERM => $chldpid;
	    }          
	    return 'TIMEOUTED';
	} if $@ eq "alarm\n";
#	die $@ unless $@ && $@ eq "alarm\n";                                        
    }                    
    return $output;
}

$Getopt::Std::STANDARD_HELP_VERSION = 1;
our $VERSION = "0.3";

my %opts;
getopts('vchet:', \%opts);

sub HELP_MESSAGE(){
    print <<END
chkworld - Compares FrugalBuild's up2date and pkgver informations
usage: chkworld [-vcth] directory ...
         -t num
         -e enable standard error output
         -v be verbose
         -c colorized output
	 -h this help
       
END
} #'

HELP_MESSAGE && exit if $opts{h};

my @dirs;
if (@ARGV) { @dirs = @ARGV; } else  {@dirs = ('.',);}  # // cant handler arrays :-/
my $time = $opts{t} || 30;
open STDERR, "/dev/null" unless $opts{e};
my $count;
my $needupdate = 0;
my $maybebroken = 0;
my $timeouted = 0;
my $passed = 0;

find sub{
    if (/^FrugalBuild\z/) {
	$count++;
	my $buildscript = contents $_;
	my ($m8r) = $buildscript =~ /^# Maintainer: (.*?) </m;
	my ($pkgname) = qx'source ./FrugalBuild; echo -n $pkgname';
	my ($pkgver) = $buildscript =~ /^pkgver=(\S*)/m;
	my ($group) = $buildscript =~ /^groups=\('?(.*?)('|\s|\))/m;
	$group = '?' unless $group;
	my $info = "Checking for $group/$pkgname-$pkgver... ";
	print $info if $opts{v};

	my $up2date = timeout $time, 'CHROOT=1; source /usr/lib/frugalware/fwmakepkg;source ./FrugalBuild;if ( `echo $up2date|grep -q " "` ); then eval $up2date; else echo $up2date; fi';
	chomp $up2date unless $up2date eq 'TIMEOUTED';

	if ($up2date eq 'TIMEOUTED') {	
	    $timeouted++;
	    print $info unless $opts{v};
	    print "Timeouted! $m8r\n" if !$opts{c};
            print "\033[1;33mTimeouted!\033[1;0m $m8r\n" if $opts{c};
	} elsif ($pkgver ne $up2date){
	    print $info unless $opts{v};
	    print ($up2date ? ("!= " . substr($up2date, 0, 12)) : "There were no output!") if !$opts{c};
	    print ($up2date ? ("!= \033[1;31m" . substr($up2date, 0, 12)."\033[1;0m" )  : "\033[1;33mThere were no output!\033[1;0m") if $opts{c};
            ($up2date ? ($needupdate++) : ($maybebroken++));
	    print " $m8r\n";
	} else {
	    $passed++;
	    print "Passed\n" if $opts{v} && !$opts{c};
            print "\033[1;32mPassed\033[1;0m\n" if $opts{v} && $opts{c};
	}
    }
}, @dirs;

print "\nTotal packages checked: $count\n";
print "Passed                : $passed\n";
print "Need to update        : $needupdate\n";
print "Timeouted             : $timeouted\n";
print "Maybe broken up2date  : $maybebroken\n";

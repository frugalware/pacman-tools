#! /bin/bash
#
# rpm2fpm
#
# by Marcus Habermehl (BMH1980) <bmh1980de@yahoo.de>
#
# Converting rpm archives to a Frugalware fpm archive

CURDIR=$(pwd)
CPIOPKG=$(mktemp)
BUILDDIR=$(mktemp -d)

INSTALL=0
REMOVE=0

# Get dependencies of the given rpm archive
get_depends()
{
	for i in $(find . -mindepth 2 -type f) ; do
		if [ -x ${i} ] ; then
			for lib in $(ldd ${i}) ; do
				if [ -f ${lib} ] ; then
					pacman -Qo ${lib} | cut -d " " -f 5
				fi
			done
		fi
	done | sort -u
}

# Usage informations
usage()
{
	echo "$1"
	echo "usage: $1 [options]"
	echo "options:"
	echo "  -i, --install Install the created fpm package"
	echo "  -r, --remove  Delete the rpm package after converting"
	echo
}

# Check the command line
while (( $# > 1 )) ; do
	case $1 in
		-h|--help)    usage && exit 0 ;;
		-i|--install) INSTALL=1 ;;
		-r|--remove)  REMOVE=1 ;;
		*)            usage && exit 1 ;;
	esac
	shift
done

# Get the absolute path of the given rpm archive
RPMPKG=$(python -c "import os.path; print os.path.abspath(\"$1\")")

# Create directory structure from the rpm archive
echo -n "Creating directories..."
for i in $(rpm -qlp ${RPMPKG}) ; do
	mkdir -p ${BUILDDIR}/$(dirname $i) 2> /dev/null
done
echo " done."

# Convert the rpm archive to a cpio archive
echo -n "Converting rpm archive to cpio archive..."
if rpm2cpio ${RPMPKG} > ${CPIOPKG} 2> /dev/null ; then
	echo " done."
else
	echo " failed."
fi

cd ${BUILDDIR}

# Extract the cpio archive
echo -n "Extracting cpio archive..."
if cpio -ivI ${CPIOPKG} 2> /dev/null ; then
	echo " done."
else
	echo " failed."
fi

# Creating the .FILELIST for the fpm archive
echo -n "Creating .FILELIST..."
if find . -mindepth 1 | sed 's|^./||' | sort > ${BUILDDIR}/.FILELIST 2> /dev/null ; then
	echo " done."
else
	echo " failed."
fi

# Extract needed informations for the fpm archive from the rpm archive
echo -n "Getting informations from the rpm archive..."
PKGNAME=$(rpm -q --queryformat=%{name} -p ${RPMPKG})
PKGVER=$(rpm -q --queryformat=%{version}-%{release} -p ${RPMPKG})
PKGDESC=$(rpm -q --queryformat=%{summary} -p ${RPMPKG})
URL=$(rpm -q --queryformat=%{url} -p ${RPMPKG})
LICENSE=$(rpm -q --queryformat=%{license} -p ${RPMPKG})
BUILDDATE=$(python -c "import time; print time.ctime($(rpm -q --queryformat=%{buildtime} -p ${RPMPKG}))")
PACKAGER="rpm2fpm"
SIZE=$(rpm -q --queryformat=%{size} -p ${RPMPKG})
ARCH=$(rpm -q --queryformat=%{arch} -p ${RPMPKG})
GROUP=$(rpm -q --queryformat=%{group} -p ${RPMPKG} | tr [:upper:] [:lower:] | tr / - | tr \  _)
echo " done."

# Write the .PKGINFO file for the fpm archive
echo -n "Generating .PKGINFO..."
echo "# Generated by rpm2fpm
# $(LC_ALL=C date)
pkgname = ${PKGNAME}
pkgver = ${PKGVER}
pkgdesc = ${PKGDESC}
url = ${URL}
license = ${LICENSE}
builddate = ${BUILDDATE}
package = ${PACKAGER}
size = ${SIZE}
arch = ${ARCH}
group = ${GROUP}" > ${BUILDDIR}/.PKGINFO
echo " done."

# Get the dependencies and write they to the .PKGINFO file
echo -n "Query dependencies..."
depend=($(get_depends))
for i in ${depend[*]} ; do
	if [[ ${i} == xorg ]] ; then
		echo "depend = x" >> ${BUILDDIR}/.PKGINFO
	else
		echo "depend = ${i}" >> ${BUILDDIR}/.PKGINFO
	fi
done
echo " done."

# Extracting existing install scripts and write them to .INSTALL
echo -n "Checking for install scripts..."
post_install="$(rpm -q --queryformat=%{postin} -p ${RPMPKG})"
pre_install="$(rpm -q --queryformat=%{prein} -p ${RPMPKG})"
post_uninstall="$(rpm -q --queryformat=%{postun} -p ${RPMPKG})"
pre_uninstall="$(rpm -q --queryformat=%{preun} -p ${RPMPKG})"
if [[ ${post_install} != \(none\) ]] ; then
	echo -e "post_install(){ ${post_install}\n}" >> ${BUILDDIR}/.INSTALL
fi
if [[ ${pre_install} != \(none\) ]] ; then
	echo -e "pre_install(){ ${pre_install}\n}" >> ${BUILDDIR}/.INSTALL
fi
if [[ ${post_uninstall} != \(none\) ]] ; then
	echo -e "post_uninstall(){ ${post_uninstall}\n}" >> ${BUILDDIR}/.INSTALL
fi
if [[ ${pre_uninstall} != \(none\) ]] ; then
	echo -e "pre_uninstall(){ ${pre_uninstall}\n}" >> ${BUILDDIR}/.INSTALL
fi
echo " done."

# Compressing the files
FPMPKG=${CURDIR}/${PKGNAME}-${PKGVER}-${ARCH}.fpm
echo -n "Creating fpm archive $(basename ${FPMPKG})..."
cd ${BUILDDIR}
if [ -f ${BUILDDIR}/.INSTALL ]; then
	tar -czvf ${FPMPKG} .PKGINFO .FILELIST .INSTALL * 2> /dev/null > /dev/null
else
	tar -czvf ${FPMPKG} .PKGINFO .FILELIST * 2> /dev/null > /dev/null
fi
echo " done."

cd ${CURDIR}

# Removing temporary build directory
echo -n "Removing build dir..."
if rm -fr ${BUILDDIR} ${CPIOPKG} 2> /dev/null ; then
	echo " done."
else
	echo $?
	echo " failed."
	exit 1
fi

# Remove the rpm archive
if (( ${REMOVE} == 1 )) ; then
	echo -n "Removing ${RPMPKG}..."
	if rm -f ${RPMPKG} 2> /dev/null ; then
		echo " done."
	else
		echo " failed."
	fi
fi

# Install the fpm archive
if (( ${INSTALL} == 1 )) ; then
	su -c "pacman -A ${FPMPKG}"
fi

exit 0

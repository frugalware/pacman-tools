#!/bin/bash

# Copyright (C) 2005 Bence Nagy <nagybence@tipogral.hu>
# Copyright (C) 2005 Miklos Vajna <vmiklos@frugalware.org>
# Parts of Fsort and Funpack_makeself are:
# Copyright (C) 1999-2005 Gentoo Foundation
# This file can be distributed under the terms of the
# GNU General Public License version 2.

[ -e /etc/repoman.conf ] && . /etc/repoman.conf || \
	die "Can't find /etc/repoman.conf!"
[ -e ~/.repoman.conf ] && . ~/.repoman.conf

[ -z "$startdir" ] && startdir=`pwd`
Fsrcdir="$startdir/src"
Fdestdir="$startdir/pkg"
Fprefix="/usr"
Fsysconfdir="/etc"
Flocalstatedir="/var"
Fconfopts="--prefix=$Fprefix"

### @defgroup fwmakepkg Common functions
 # @{
 # @brief Common functions used by makepkg
 ##

### Prints out a message
 # @param message message to display
 ##
Fmessage() {
	if [ "$USE_COLOR" = "Y" -o "$USE_COLOR" = "y" ]; then
		echo -e "\033[1;36m==>\033[1;0m \033[1;1m$1\033[1;0m" >&2
	else
		echo "==> $1" >&2
	fi
}

### Cause makepkg to exit
 ##
Fdie() {
	exit 2
}

### Go to the source directory if it is $Fsrcdir currently
 # @param dir optional source directory, default is $pkgname-$pkgver$pkgextraver
 ##
Fcd() {
	if [ "$Fsrcdir" = `pwd` ]; then
		if [ "$#" -eq 1 ]; then
			Fmessage "Going to the source directory..."
			cd "$Fsrcdir/$1" || Fdie
		elif [ "$#" -eq 0 ]; then
			Fcd "$pkgname-$pkgver$pkgextraver"
		fi
	fi
}

### Creates a directory under $Fdestdir
 # @param dir name of the directory to create (you can supply more than one)
 ##
Fmkdir() {
	local i
	for i in "$@"; do
		if [ ! -d "$Fdestdir/$i" ]; then
			Fmessage "Creating directory: $i"
			mkdir -p "$Fdestdir/$i" || Fdie
		fi
	done
}

### Deletes (rm -rf) a directory stucture under $Fdestdir
 # @param path name of the path to rm -rf (you can supply more than one)
 ##
Frm() {
	local i
	for i in "$@"; do
		Fmessage "Deleting file(s): $i"
		rm -rf "$Fdestdir"/$i || Fdie
	done
}

### Copy file(s) under $Fdestdir
 # @param source name of the file(s)
 # @param dest path of the destination
 ##
Fcp() {
	Fmessage "Copying file(s): $1"
	cp "$Fdestdir/"$1 "$Fdestdir"/$2 || Fdie
}

### Copy file(s) under $Fdestdir recursively
 # @param source name of the file(s)
 # @param dest path of the destination
 ##
Fcpr() {
	Fmessage "Copying file(s) recursive: $1"
	cp -dpR "$Fsrcdir/"$1 "$Fdestdir"/$2 || Fdie
}

### Move file(s) under $Fdestdir
 # @param source name of the file(s)
 # @param dest path of the destination
 ##
Fmv() {
	Fmessage "Moving file(s): $1"
	mv "$Fdestdir/"$1 "$Fdestdir"/$2 || Fdie
}

### Install file(s) to $Fdestdir
 # @param mode set permission mode (as in chmod)
 # @param file(s) to be installed (defaults to `basename $destination`)
 # @param destination
 ##
Finstallrel() {
	if [ "$#" -eq 3 ]; then
		Fmessage "Installing file(s): $2"
		if [ "`ls -l $2 | wc -l`" -gt 1 ]; then
			Fmkdir "$3"
		fi
		if [ -d "$Fdestdir/$3" -a ! "`ls -l $2 | wc -l`" -gt 1 ]; then
			install -D -m "$1" $2 "$Fdestdir/$3/`basename $2`" || Fdie
		else
			install -D -m "$1" $2 "$Fdestdir/$3" || Fdie
		fi
	elif [ "$#" -eq 2 ]; then
		Finstallrel "$1" "`basename $2`" "$2"
	else
		local i
		for i in "${@:2:$#-2}"; do
			Fmkdir "${@:$#}"
			Finstallrel $1 "$i" "${@:$#}/`basename $i`"
		done
	fi
}

### Install file(s) to $Fdestdir from $Fsrcdir
 # @param mode set permission mode (as in chmod)
 # @param file(s) to be installed from $Fsrcdir \
 #        (defaults to $Fsrcdir/`basename $destination`)
 # @param destination
 ##
Finstall() {
	if [ "$#" -eq 3 ]; then
		Finstallrel "$1" "$Fsrcdir/$2" "$3"
	elif [ "$#" -eq 2 ]; then
		Finstallrel "$1" "$Fsrcdir/`basename $2`" "$2"
	else
		local i
		for i in "${@:2:$#-2}"; do
			Fmkdir "${@:$#}"
			Finstallrel "$1" "$Fsrcdir/$i" "${@:$#}/`basename $i`"
		done
	fi
}

Fdirschmod() {
	Fmessage "Configure chmod dirs & subdirs inside: $1"
	find "$Fdestdir"/$1 -type d |xargs chmod $2 || Fdie
}

Ffileschmod() {
	Fmessage "Configure chmod all files inside: $1"
        find "$Fdestdir"/$1 -type f |xargs chmod $2 || Fdie
}

Fdirschown() {
	Fmessage "Configure chown dirs & subdirs inside: $1"
	find "$Fdestdir"/$1 -type d |xargs chown $2:$3 || Fdie
}

Ffileschown() {
	Fmessage "Configure chown all files inside: $1"
	find "$Fdestdir"/$1 -type f |xargs chown $2:$3 || Fdie
}

### Install executable file(s) to $Fdestdir from $Fsrcdir
 # @param file(s) to be installed from $Fsrcdir \
 #        (defaults to $Fsrcdir/`basename $destination`)
 # @param destination
 ##
Fexe() {
	Finstall 0755 "$@"
}

### Install executable file(s) to $Fdestdir
 # @param file(s) to be installed \
 #        (defaults to `basename $destination`)
 # @param destination
 ##
Fexerel() {
	Finstallrel 0755 "$@"
}

### Install regular file(s) to $Fdestdir from $Fsrcdir
 # @param file(s) to be installed from $Fsrcdir \
 #        (defaults to $Fsrcdir/`basename $destination`)
 # @param destination
 ##
Ffile() {
	Finstall 0644 "$@"
}

### Install regular file(s) to $Fdestdir
 # @param file(s) to be installed \
 #        (defaults to `basename $destination`)
 # @param destination
 ##
Ffilerel() {
	Finstallrel 0644 "$@"
}

### Install documentation file(s) to $Fdestdir/usr/share/doc/$pkgname-$pkgver \
 #  from $Fsrcdir
 # @param file(s) to be installed from $Fsrcdir \
 #        (defaults to $Fsrcdir/`basename $destination`)
 ##
Fdoc() {
	Fmkdir "/usr/share/doc/$pkgname-$pkgver"
	Ffile "$@" "/usr/share/doc/$pkgname-$pkgver/"
}

### Install documentation file(s) to $Fdestdir/usr/share/doc/$pkgname-$pkgver
 # @param file(s) to be installed \
 #        (defaults to $Fsrcdir/`basename $destination`)
 ##
Fdocrel() {
	Fmkdir "/usr/share/doc/$pkgname-$pkgver"
	Ffilerel "$@" /usr/share/doc/$pkgname-$pkgver
}

### Create symlink in $Fdestdir
 # @param source (i.e. mysql/libmysqlclient.so)
 # @param target (i.e. /usr/lib/) ($target's dir will be created if necessary)
 ##
Fln() {
	Fmessage "Creating symlink(s): $1"
	Fmkdir "`dirname $2`"
	ln -sf $1 "$Fdestdir"/$2 || Fdie
}

### Use sed with file(s)
 # @param regexp 
 # @param replacement (see man sed!)
 # @param file(s) to edit in place
 ##
Fsed() {
	Fcd
	for i in ${@:3:$#}; do
		Fmessage "Using sed with file: $i"
		sed -i -e "s|$1|$2|g" "$i" || Fdie
	done
}

### Strip $Fdestdir from files in $Fdestdir
 # @param file(s) to strip
 ##
Fdeststrip() {
	local i
	for i in "$@"; do
		Fsed "$Fdestdir" "" $Fdestdir/$i
	done
}

### Apply a patch with -p1 (use the .patch0 suffix for -p0)
 # @param Patch to apply. A ".gz" or ".bz2" suffix will be ingored.
 ##
Fpatch() {
	Fcd
	local i
	Fmessage "Using patch: $1"
	if [ -n "`echo "$1" | grep '\.\(patch[0-9]*\|diff\)\.gz$'`" ]; then
		i=`basename $1 .gz`
	elif [ -n "`echo "$1" | grep '\.\(patch[0-9]*\|diff\)\.bz2$'`" ]; then
		i=`basename $1 .bz2`
	else
		i=$1
	fi
	if [ -n "`echo $i | grep \.patch0$`" ]; then
		patch -Np0 --no-backup-if-mismatch -i "$Fsrcdir/$i" || Fdie
	else
		patch -Np1 --no-backup-if-mismatch -i "$Fsrcdir/$i" || Fdie
	fi
}

### Apply patches from source(). \
 #  Allowed suffixes are \.\(patch[0-9]*\|diff\)\(\.\(gz\|bz2\)\|\). \
 #  URLs allowed, too.
 ##
Fpatchall() {
	for i in ${source[@]}; do
		if [ -n "`echo "$i" | grep \.patch[0-9]*$`" -o -n "`echo "$i" | grep \.diff$`" -o -n "`echo "$i" | grep '\.\(patch[0-9]*\|diff\)\.\(gz\|bz2\)$'`" ]; then
			Fpatch `strip_url "$i"`
		fi
	done
}

### A wrapper to ./configure. It will try to run ./configure, Makefile.PL, \
 #  extconf.rb and configure.rb, respectively. It will automatically add the \
 #  --prefix=$Fprefix (defaults to /usr), \
 #  --sysconfdir=$Fsysconfdir (defaults to /etc) and the \
 #  --localstatedir=$Flocalstatedir (defaults to /var) switches. The two later \
 #  will be added only if the configure script support it.
 #  If you want to pre-set a switch (i.e. add a switch only on a ceratin \
 #  arch or so) apped the $Fconfopts variable.
 # @param switch(es) to pass to the configure script
 ##
Fconf() {
	Fcd
	Fmessage "Configuring..."
	if [ -x configure ]; then
		grep -q sysconfdir configure && \
			Fconfopts="$Fconfopts --sysconfdir=$Fsysconfdir"
		grep -q localstatedir configure && \
			Fconfopts="$Fconfopts --localstatedir=$Flocalstatedir"
		./configure $Fconfopts "$@" || Fdie
	elif [ -f Makefile.PL ]; then
		perl Makefile.PL "$@" || Fdie
		Fsed `perl -e 'printf "%vd", $^V'` "current" Makefile
	elif [ -f extconf.rb ]; then
		ruby extconf.rb --prefix="$Fprefix" "$@" || Fdie
	elif [ -f configure.rb ]; then
		./configure.rb --prefix="$Fprefix" "$@" || Fdie
	fi
}

### A wrapper to make and "python setup.py build" after calling Fconf()
 # @param switch(es) to pass to Fconf()
 ##
Fmake() {
	Fconf "$@"
	Fmessage "Compiling..."
	if [ -f GNUmakefile -o -f makefile -o -f Makefile ]; then
		make || Fdie
	elif [ -f setup.py ]; then
		python setup.py build "$@" || Fdie
	fi
}

### A wrapper to make install: calls make DESTDIR=$Fdestir or \
 #  prefix=$Fdestdir/usr install (which is necessary). \
 #  Also handles python's setup.py. \
 #  Removes /usr/info/dir and /usr/share/info/dir.
 # @param param(s) passed to make/python
 ##
Fmakeinstall() {
	Fmessage "Installing to the package directory..."
	if [ -f GNUmakefile -o -f makefile -o -f Makefile ]; then
		if grep -q DESTDIR GNUmakefile makefile Makefile 2>/dev/null; then
			make DESTDIR="$Fdestdir" "$@" install || Fdie
		else
			make prefix="$Fdestdir"/"$Fprefix" "$@" install || Fdie
		fi
	elif [ -f setup.py ]; then
		python setup.py install --prefix "$Fprefix" --root "$Fdestdir" "$@" || Fdie
	fi
	if [ -e $Fdestdir/usr/info/dir ]; then
		Frm /usr/info/dir
	fi
	if [ -e $Fdestdir/usr/share/info/dir ]; then
		Frm /usr/share/info/dir
	fi
}

### A default build(): Fpatchall, Fmake, Fmakeinstall
 # @param param(s) passed to Fmake
 ##
Fbuild() {
	Fpatchall
	Fmake "$@"
	Fmakeinstall
}

### Create an rc.d environment
 # @param name of the rc script, defaults to $pkgname
 ##
Frcd() {
	if [ "$#" -eq 1 ]; then
		Fmessage "Creating rc.d environment: $1"
		Fexe /etc/rc.d/rc.$1
		Ffile ../messages/* /etc/rc.d/rc.messages/
	else
		Frcd "$pkgname"
	fi
}

build() {
	Fbuild
}

### Updates config.sub and config.guess from our automake.
 ##
Facu() {
	cat /usr/share/automake/config.sub >config.sub
	cat /usr/share/automake/config.guess >config.guess
}

### Similar to sort, but handles versions (i.e. 1.9 vs 1.10 vs 2.0) correctly. \
 # Uses vercmp from pacman.
 # @param versions to be sorted
 ##
Fsort() {
	local i= items= left=0
	items=( `cat|tr '\n' ' '` )
	while [[ ${left} -lt ${#items[@]} ]] ; do
		local lowest_idx=${left}
		local idx=$(( ${lowest_idx} + 1 ))
		while [[ ${idx} -lt ${#items[@]} ]] ; do
			i=`vercmp "${items[${lowest_idx}]}" "${items[${idx}]}"`
			[[ $i -gt 0 ]] && lowest_idx=${idx}
			idx=$(( ${idx} + 1 ))
		done
		local tmp=${items[${lowest_idx}]}
		items[${lowest_idx}]=${items[${left}]}
		items[${left}]=${tmp}
		left=$(( ${left} + 1 ))
	done
	echo ${items[@]}|sed 's/ /\n/g'
}

### Unpack those pesky makeself generated files... \
 # They're shell scripts with the binary package tagged onto \
 # the end of the archive. Loki utilized the format as does \
 # many other game companies.
 # @param file to unpack
 # @param offset (optional)
 # @param tail|dd (optional)
 ##
Funpack_makeself() {
	local src="$1"
	local skip="$2"
	local exe="$3"

	local shrtsrc="$(basename "${src}")"
	Fmessage "Unpacking ${shrtsrc}"
	local dir="$(basename "${src}" .sh)"
	mkdir $dir
	if [ -z "${skip}" ]
	then
		local ver="`grep -a '#.*Makeself' ${src} | awk '{print $NF}'`"
		local skip=0
		exe=tail
		case ${ver} in
			1.5.*)	# Tested 1.5.{3,4,5} ... guessing 1.5.x series is same.
				skip=$(grep -a ^skip= "${src}" | cut -d= -f2)
				;;
			2.0|2.0.1)
				skip=$(grep -a ^$'\t'tail "${src}" | awk '{print $2}' | cut -b2-)
				;;
			2.1.1)
				skip=$(grep -a ^offset= "${src}" | awk '{print $2}' | cut -b2-)
				let skip="skip + 1"
				;;
			2.1.2)
				skip=$(grep -a ^offset= "${src}" | awk '{print $3}' | head -n 1)
				let skip="skip + 1"
				;;
			2.1.3)
				skip=`grep -a ^offset= "${src}" | awk '{print $3}'`
				let skip="skip + 1"
				;;
			2.1.4)
				skip=$(grep -a offset=.*head.*wc "${src}" | awk '{print $3}' | head -n 1)
				skip=$(head -n ${skip} "${src}" | wc -c)
				exe="dd"
				;;
			*)
				plain "I'm sorry, but I was unable to support the Makeself file."
				plain "Version '${ver}' is not supported."
				Fdie
				;;
		esac
	fi
	case ${exe} in
		tail)	exe="tail -n +${skip} '${src}'";;
		dd)		exe="dd ibs=${skip} skip=1 obs=1024 conv=sync if='${src}'";;
		*)		error "makeself can't handle exe '${exe}'"
				Fdie
	esac

	# Let's grab the first few bytes of the file to figure out what kind of archive it is.
	local tmpfile="$(mktemp)"
	eval ${exe} 2>/dev/null | head -c 512 > "${tmpfile}"
	local filetype="$(file -b "${tmpfile}")"
	case ${filetype} in
		*tar\ archive)
			eval ${exe} | tar --no-same-owner -xf - -C $dir
			;;
		bzip2*)
			eval ${exe} | bzip2 -dc | tar --no-same-owner -xf - -C $dir
			;;
		gzip*)
			eval ${exe} | tar --no-same-owner -xzf - -C $dir
			;;
		compress*)
			eval ${exe} | gunzip | tar --no-same-owner -xf - -C $dir
			;;
		*)
			error "Unknown file type \"${filetype}\"?"
			Fdie
			;;
	esac
}

### Our autogen.sh. Runs aclocal, autoheader, autoconf and finally automake.
 ##
Fautoconfize() {
	aclocal || Fdie
	autoheader || Fdie
	autoconf || Fdie
	automake -a -c -f || Fdie
}

### Include a scheme. They are in $fst_root/source/include/, and they have a \
 # .sh suffix. After including them, you can of course overwrite the \
 # initialized values, using only a part of the scheme.
 # @param scheme(s) to include (_without_ the .sh suffix)
 ##
Finclude ()
{
	if [ "$startdir" = `pwd` ]; then
		local i
		if darcs --commands 2>&1|grep -q add; then
			local Fincdir=`darcs add . 2>&1|sed -n 's/[^/]*/../g; 4 p'`/source/include
		elif [ -d /var/tmp/fst/include ]; then
			local Fincdir=/var/tmp/fst/include
		elif [ -d $fst_root/$reponame/source/include ]; then
			local Fincdir=$fst_root/$reponame/source/include
		fi
		if [ ! -z "$Fincdir" ]; then
			for i in "$@"
			do
				source $Fincdir/$i.sh || Fdie
			done
		fi
	fi
}

### Extracts version from a page's last tar.gz link
 ##
Flasttar()
{
	grep tar.gz$|sed -n 's/.*-\(.*\)\.t.*/\1/;$ p'
}

### @}

# v0.1 Wed, 19 Jan 2005 11:43:53 +0100
# v0.2 Thu, 20 Jan 2005 10:47:02 +0100
# v0.2.5 Thu, 20 Jan 2005 11:55:11 +0100
# v0.3 Thu, 20 Jan 2005 14:28:39 +0100
# v0.4 Wed, 02 Feb 2005 00:16:03 +0100
# v0.5 Thu, 03 Feb 2005 16:13:55 +0100
# v0.6 Wed, 09 Feb 2005 00:16:44 +0100
# v0.7 Mon, 14 Feb 2005 14:17:30 +0000
# v0.8 Mon, 21 Feb 2005 19:54:10 +0100
# v0.9 Sat, 26 Mar 2005 12:16:26 +0100
# v0.9.1 Thu, 05 May 2005 21:06:25 +0100
# v0.9.2 Tue, 10 May 2005 10:24:36 +0100
# v0.9.3 Mon, 13 Jun 2005 20:07:25 +0100
# v0.9.4 Wed, 15 Jun 2005 21:27:59 +0100

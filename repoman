#!/bin/bash

# (c) 2005-2007 Miklos Vajna <vmiklos@frugalware.org>
# repoman for Frugalware
# distributed under GPL License

function usage()
{
	cat <<EOF
Usage: `basename $0` [global options] [command] [command options]

Commands:
cl|changelog [category/]package             Generate a Changelog file.
c|clean package                             Delete a package.
del|delete file                             Delete a file from FST.
ls|list directory                           List a directory in FST.
rec|record [parameters]                     Records a pacakge.
up|upload source destination                Upload a file to FST.
push [record parameters]                    Pushes a pacakge.

Global options:
-d|--dry-run  Don't actually run the commands.
-k            Don't be interactive
-v|--verbose  Give verbose output.
-h|--help     Show this help screen.
EOF
}

msg()
{
	echo -e "\033[1;32m==>\033[1;0m \033[1;1m$1\033[1;0m" >&2
}

dry_run()
{
	if [ -z "$dryrun" ]; then
		eval "$*"
	else
		echo $*
	fi
}

check_servers()
{
	server=$(eval "echo \$${reponame}_servers")
        if echo $server |grep -q :; then
                host=${server%:*}
                path=${server#*:}
        else
                die "The first server in the $reponame repo is read-only, please update the list of servers."
        fi
}

_get_root()
{
	local i=`pwd`
	while true
	do
		if [ -e "$i/_darcs" ]; then
			break
		elif [ "$i" == "" ]; then
			break
		fi
		i=`echo $i|sed 's|\(.*\)/.*|\1|'`
	done
	echo $i
}

delete()
{
	local i files rmopts host
	check_servers
	sudouser=$(eval "echo \$${reponame}_sudo")
	[ -n "$sudouser" ] && sudo="sudo -u $sudouser"
	# Strip leading / and any ..
	for i in $*
	do
		files="$files `echo $i|sed 's|^/||;s|\.\./||g'`"
	done
	if [ "$verbose" != 0 ]; then
		rmopts="-v"
	fi
	for i in $files
	do
		msg "Deleting file(s): $i"
		ssh $host "cd $path; if [ ! -e _darcs/lock ]; then $sudo rm $rmopts $path/$i; else echo \"Couldn't get lock.\"; fi"
	done
}

upload()
{
	if [ "$#" -lt 2 ]; then
		echo "Too few parameters!"
		usage
		exit 1
	fi
	check_servers
	sudouser=$(eval "echo \$${reponame}_sudo")
	[ -n "$sudouser" ] && sudo="sudo -u $sudouser"
	# Strip leading / and any ..
	dest=`echo ${@:$#} |sed 's|^/||;s|\.\./||g'`
	for src in "${@:1:$#-1}"
	do
		name=`basename $src`
		msg "Requesting a temporary file"
		tmp=`ssh $host mktemp 2>/dev/null`
		msg "Uploading file: $src (to $tmp)"
		scp $src $host:$tmp
		if echo "`sha1sum $src|sed 's/\(.*\)  .*/\1/'`  $tmp" |ssh $host sha1sum -c - >/dev/null 2>&1; then
			msg "Copying to $dest"
			ssh $host "chmod 644 $tmp; $sudo cp $tmp $path/$dest/$name && rm $tmp"
		else
			echo "The uploaded file is corrupted :-/"
			ssh $host "rm $tmp"
			exit 1
		fi
	done
}

list()
{
	check_servers
	for i in $*
	do
		msg "Fetching contents of directory: $i"
		ssh $host "ls $path/$i"
		ret=$?
	done
	exit $ret
}

split_group_pkg()
{
	if echo $1 |grep -q '^[^/]\+/[^/]\+$'; then
		group=${1%/*}
		pkg=${1#*/}
	else
		group=$groups
		pkg=$1
	fi
}

clean()
{
	check_servers
	sudouser=$(eval "echo \$${reponame}_sudo")
	[ -n "$sudouser" ] && sudo="sudo -u $sudouser"
	fdb=$(eval "echo \$${reponame}_fdb")
	[ -z "$fdb" ] && fdb="$reponame.fdb"
	for i in $*
	do
		# drop the group/ prefix if any
		i=${i#*/}
		msg "Cleaning up $i"
		ssh $host "cd $path/frugalware-$arch && \
			arch=$arch $sudo updatesync del $fdb $i && \
			genchangelog --clean $i"
	done
}

changelog()
{
	msg "Generating Changelog for $1"
	split_group_pkg $1
	check_servers
	sudouser=$(eval "echo \$${reponame}_sudo")
	[ -n "$sudouser" ] && sudo="sudo -u $sudouser"
	fdb=$(eval "echo \$${reponame}_fdb")
	[ -z "$fdb" ] && fdb="$reponame.fdb"
	if [ "$verbose" == 1 ]; then
		catcmd="cat Changelog"
	else
		# just a workaround for the "syntax error near unexpected token `;'" bug
		catcmd="echo -n \"\""
	fi
	ssh $host "cd $path; \
if [ ! -e _darcs/rlock ]; then \
	touch _darcs/rlock; \
	cd frugalware-$arch; \
	arch=$arch $sudo updatesync upd $fdb ../source/$group/$pkg/FrugalBuild; \
	cd $path; rm _darcs/rlock; \
	cd $path/source/$group/$pkg; arch=$arch $sudo genchangelog; \
	$catcmd; \
else \
	echo \"Couldn't get lock.\"; \
fi"
}

_keypress()
{
	local old=$(stty -g)
	stty -icanon
	c=$(head -c1)
	stty "$old"
	echo $c
}

ask()
{
	if [ -z "$noask" ]; then
		echo $*
		echo -n "Is this ok? [Y/n] "
		c=`_keypress`
		echo
	fi
	if [ -n "$noask" ] || [[ "(y|Y)?" =~ "$c" ]]; then
		eval "$*"
	fi
}

_do_record()
{
	root="`_get_root`"
	echo -e "`LANG= LC_ALL= date +"%a %b %d %H:%M:%S %Z %Y"`
`cat $root/_darcs/prefs/author`
$pkgname-$pkgver-$pkgrel-$arch
$@" | darcs rec -a --pipe
}

record()
{
	echo -n "Checking FrugalBuild... "
	if fblint &>/dev/null; then
		echo "OK"
	else
		echo "Failed"
		exit 1
	fi
	if [ -n "$*" ]; then
		_do_record $*
	else
		darcs what -s .
		ask "darcs record --edit-long-comment -m '$pkgname-$pkgver-$pkgrel-$arch' ."
	fi
}

# returns true if the file is a build log for some other arch (we should not remove them)
_is_log()
{
	local i
	for i in ${archs[@]}
	do
		[ $i = $arch ] && continue
		if echo $1 |grep -q "$i\.log\.bz2$"; then
			return 0
		fi
	done
	return 1
}

srcdel()
{
	for i in ${archs[@]} $arch
	do
		export CARCH=$i
		unset pkgver source
		for j in `set|grep ^_F_|sed 's/\(=.*\| ()\)//'`; do unset $j; done
		export startdir=`pwd`
		. FrugalBuild
		srclocal=(${srclocal[@]} ${source[@]})
	done
	srclocal=(${srclocal[@]} ${signatures[@]})
	srckeep=$(mktemp)
	mydir=$(pwd|sed "s|$(_get_root)||")

	darcsdir="_darcs/pristine"
	if ! $0 -t $reponame ls $darcsdir &>/dev/null; then
		darcsdir="_darcs/current"
	fi

	$0 -t $reponame ls $darcsdir/$mydir 2>/dev/null >$srckeep

	for i in $($0 -t $reponame ls $mydir 2>/dev/null)
	do
		if ! grep -q $i $srckeep && ! _is_log $i && [ "$i" != "Changelog" ]; then
			if ! echo ${srclocal[@]} |grep -q $i; then
				dry_run delete $mydir/$i
			fi
		fi
	done

	rm -f $srckeep
}

fpmdel()
{
	fpmkeep=$(mktemp)
	fpmserver=$(mktemp)

	for i in $pkgname ${subpkgs[@]}
	do
		echo $i-$pkgver-$pkgrel-$arch.fpm >> $fpmkeep
		$0 -t $reponame ls frugalware-$arch 2>/dev/null |grep "^$i-[^-]\+-[^-]\+-$arch.fpm" >> $fpmserver
	done

	for i in $(cat $fpmserver)
	do
		if ! grep -q $i $fpmkeep; then
			dry_run delete frugalware-$arch/$i
		fi
	done

	rm -f $fpmkeep $fpmserver
}

sync()
{
	srcdel

	modpkgname=$(echo $pkgname | sed 's/\+/\\+/g')
	cmd="darcs push --match 'name $modpkgname'"
	if [ -n "$noask" ]; then
		cmd="$cmd -a"
	fi
	dry_run "$cmd"

	# here we _could_ upload the new sources but that'll be done by changelog()

	for i in *-$arch.fpm
	do
		dry_run upload $i frugalware-$arch/
	done

	buildlog="$pkgname-$pkgver-$pkgrel-$arch.log"
	if [ -f $buildlog -o -f $buildlog.bz2 ]; then
		[ -f $buildlog ] && dry_run bzip2 $buildlog
		dry_run upload $buildlog.bz2 source/$groups/$pkgname/
	fi

	fpmdel
	dry_run changelog $groups/$pkgname
	if [ "$1" == "-c" ]; then
		rm -rvf *-$arch.fpm
		rm -vf *.log.bz2
		rm -rf src
	fi
}

push()
{
	if [ "$1" == "--clean" -o "$1" == "-c" ]; then
		clean="-c"
		shift 1
	else
		clean=""
	fi
	dry_run record $*
	sync $clean
}

die()
{
	echo -e "$0: $*"
	exit 1
}

update()
{
	if [ ! "`type -p rsync`" ]; then
		die "The rsync program is missing. Please install it with pacman -S rsync."
	fi
	for i in ${repos[@]}
	do
		pushonly=$(eval "echo \$${i}_pushonly")
		[ "$pushonly" = "y" ] && continue
		# Search for a server.
		eval "servers=(\${${i}_servers[@]})"
		if [ -z "$servers" ]; then
			echo -e "$0: Can't find any server!"
			if [ -e /etc/repoman.conf.pacnew ]; then
				echo -e "$0: HINT: merge the contents of /etc/repoman.conf.pacnew to /etc/repoman.conf!"
			fi
			exit 1
		fi
		echo ":: Synchronizing source trees..."
		for j in ${servers[@]}
		do
			server="$j/_darcs/current/"
			mkdir -p $fst_root/$i
			cd $fst_root/$i
			echo "warning: this operation can take minutes, please be patient"
			if [ "$verbose" != 1 ]; then
				echo -n "$i... "
				rsync -azq $server ./
				ret=$?
			else
				echo "$i..."
				rsync -azvP $server ./
				ret=$?
			fi
			if [ $ret != 0 ]; then
				echo "failed."
			else
				echo "done."
				break
			fi
		done
	done
}

chk_updated()
{
	if [ ! -d $1 ]; then
		echo "ERROR: Could not find FrugalBuild scripts in $1"
		echo "       have you used 'repoman upd' yet?"
		exit 1
	fi
}

search()
{
	chk_updated $fst_root
	[ -z "$*" ] || grepcmd="|grep $*"
	for i in ${repos[@]}
	do
		eval "find $fst_root/$i/source -name FrugalBuild |xargs grep '\(options=(.*nobuild.*)\|^nobuild=\)' |sed 's|$fst_root/||;s|/source/[^/]*||;s|/FrugalBuild:.*||' $grepcmd"
	done
}

merge()
{
	local i repo target
	if echo $1 |grep -q /; then
		repo=${1%/*}
		target=${1#*/}
	else
		repo="${repos[@]}"
		target=$1
	fi
	# install essential packages if necessary
	echo -n "checking for essential packages... "
	. /etc/makepkg.conf
	for i in "$COREPKGS"
	do
		missing="$missing `pacman -Sg $i |grep -v '^\w'` "
	done
	missdep=`pacman-g2 -T $missing`
	ret=$?
	if [ "$ret" != "0" ]; then
		echo "failed"
		echo "Use the following command to install the missing packages:"
		echo "pacman-g2 -S `echo $missdep| sed 's|[^ ]\+: ||g;s|=.*$||;s|>.*$||;s|<.*$||'`"
		exit 1
	else
		echo "done"
	fi
	found=0
	for i in ${repo[@]}
	do
		# sanility checks
		chk_updated $fst_root/$i
		pushonly=$(eval "echo \$${i}_pushonly")
		[ "$pushonly" = "y" ] && continue
		dir=`find $fst_root/$i -maxdepth 4 -type d -name "$target"|sed -n '$ p'`
		if [ -z "$dir" ]; then
			continue
		else
			found=1
			cd $dir
			makepkg $makepkg_opts
		fi
	done
	[ "$found" = 0 ] && die "package '$target' not found"
}

[ -e /etc/repoman.conf ] && . /etc/repoman.conf || \
	die "Can't find /etc/repoman.conf!"

if [ -e FrugalBuild ]; then
	[ -e /usr/lib/frugalware/fwmakepkg ] && . /usr/lib/frugalware/fwmakepkg || \
		die "Can't find /usr/lib/frugalware/fwmakepkg!"
	[ -e /etc/makepkg.conf ] && . /etc/makepkg.conf || \
		die "Can't find /etc/makepkg.conf!"
	. FrugalBuild
fi

# Initializating variables.
version='0.3.0'
[ -z "$arch" ] && arch=`uname -m`

# Checking for darcs.
which darcs >/dev/null 2>&1
if [ $? != 0 ]; then
	echo "ERROR: Can't find darcs. You can install it with pacman -S darcs."
	exit 1
fi

# Pharsing parameters.

if [ $# -le 0 ]; then
	usage
	exit 0
fi

# default for the -t parameter
reponame=${repos[0]}

while [ "$1" != "" ]; do
	case $1 in
		-h|--help)
			usage
			exit 0
		;;
		-v|--verbose)
			 verbose=1
		;;
		-t|--tree)
			shift 1
			reponame=$1
		;;
		-k)
			noask=1
		;;
		-d|--dry-run)
			dryrun=1
		;;
		-*)
			echo "Wrong parameter!"
			usage
			exit 1
		;;
		cl|changelog)
			shift 1
			changelog $*
		;;
		c|clean)
			shift 1
			clean $*
		;;
		del|delete)
			shift 1
			delete $*
		;;
		ls|list)
			shift 1
			list $*
			exit 0
		;;
		m|merge)
			shift 1
			merge $*
		;;
		up|upload)
			shift 1
			upload $*
		;;
		upd|update)
			shift 1
			update $*
		;;
		s|search)
			shift 1
			search $*
		;;
		rec|record)
			shift 1
			record $*
		;;
		push)
			shift 1
			push $*
		;;
		sync)
			shift 1
			sync $*
		;;
	esac
	shift 1
done
